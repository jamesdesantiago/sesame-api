# .github/workflows/ci.yml
name: CI

on:
  push:
  pull_request:
  workflow_dispatch:

# prevent concurrent runs on the same branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  tests:
    name: Lint, type-check & test
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
      - name: ⬇️ Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: 📦 Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          # dev tools
          pip install \
            black==24.2.0 \
            isort==5.13.2 \
            flake8==7.0.0 \
            mypy==1.10.0 \
            pytest==8.2.0 \
            pytest-cov==5.0.0

      # ---------- Static checks ----------
      - name: 🔍 Black formatting (check-only)
        run: black --check app tests main.py

      - name: 🔍 isort import ordering (check-only)
        run: isort --check --diff app tests main.py

      - name: 🔍 Flake8 lint
        run: flake8 app tests main.py

      - name: 🔍 mypy type-checking
        run: mypy app

      # ---------- Generate test-env file ----------
      - name: 🔑 Generate .env.test
        run: |
          cat > .env.test <<EOF
          ENVIRONMENT=test
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_SSL_MODE=${{ secrets.DB_SSL_MODE }}
          # Firebase Admin expects the raw JSON (we’ll write it below)
          FIREBASE_SERVICE_ACCOUNT_KEY_JSON<<EOF
          ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY_JSON }}
          EOF
          SENTRY_DSN=${{ secrets.SENTRY_DSN }}
          EOF

          # If you need SSL verification in test, write the CA cert:
          if [ -n "${{ secrets.DB_CA_CERT_PEM }}" ]; then
            echo "${{ secrets.DB_CA_CERT_PEM }}" > ca-certificate.crt
            echo "DB_CA_CERT_FILE=ca-certificate.crt" >> .env.test
          fi

      # ---------- Run tests ----------
      - name: 🧪 Run pytest
        env:
          ENVIRONMENT: test
        run: pytest -q --cov=app --cov-report=xml

      # (Optional) upload coverage to codecov or coveralls
      # - name: Upload coverage
      #   uses: codecov/codecov-action@v4
      #   with:
      #     file: coverage.xml

